#!/bin/bash -eu

<% unless p("cf_networking.disable") || p("cf_networking.host_only") %>
set -o pipefail

LOG_DIR=/var/vcap/sys/log/silk-daemon
LOGFILE="${LOG_DIR}"/drain.log
REP_ADDRESS=<%= p("cf_networking.rep_listen_addr_admin") %>
SILK_DAEMON_HEALTH_CHECK_ADDRESS=localhost:<%= p("cf_networking.silk_daemon.listen_port") %>
export RUN_DIR=/var/vcap/sys/run/silk-daemon
export PIDFILE="${RUN_DIR}"/silk-daemon.pid

mkdir -p "${LOG_DIR}"

exec 3>&1

exec 1>> "${LOGFILE}"
exec 2>> "${LOGFILE}"

ping_rep() {
  curl --fail --silent http://"${REP_ADDRESS}"/ping >/dev/null 2>&1
}

ping_silk_daemon() {
  curl --fail --silent http://"${SILK_DAEMON_HEALTH_CHECK_ADDRESS}"/ping >/dev/null 2>&1
}

run_teardown() {
  /var/vcap/packages/silk-daemon/bin/silk-teardown \
    -config=/var/vcap/jobs/silk-daemon/config/client-config.json
}

wait_for_rep_to_exit() {
  while ping_rep; do
    sleep 5
    echo "$(date): waiting for rep to exit"
  done
}

wait_for_silk_daemon_to_exit() {
  local attempts=0
  while [ "${attempts}" -le 5 ]; do
    if ping_silk_daemon; then
      let attempts="${attempts}"+1
      sleep 2
    else
      return 0
    fi
  done

  return 1
}

output_for_bosh() {
  local exit_code=$?

  if [ "${exit_code}" -eq 0 ]; then
    echo "$(date): drain success"
  else
    echo "$(date): drain failed"
  fi

  echo "${exit_code}" >&3
}

trap output_for_bosh EXIT

wait_for_rep_to_exit

set +e
SILK_DAEMON_PID=$(cat "${PIDFILE}")
kill -TERM "${SILK_DAEMON_PID}"
set -e

if wait_for_silk_daemon_to_exit; then
  echo "$(date): silk-daemon exited, running teardown..."
  run_teardown
else
  echo "$(date): silk-daemon failed to exit, skipping teardown..."
  exit 1
fi
<% else %>
  echo "0"
<% end %>
